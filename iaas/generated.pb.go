// Code generated by protoc-gen-gogo.
// source: github.com/Serabe/iaas/iaas/protos/github.com/Serabe/iaas/iaas/generated.proto
// DO NOT EDIT!

/*
	Package iaas is a generated protocol buffer package.

	It is generated from these files:
		github.com/Serabe/iaas/iaas/protos/github.com/Serabe/iaas/iaas/generated.proto

	It has these top-level messages:
		IncRequest
		IncResponse
*/
package iaas

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type IncRequest struct {
	Arg1 float64 `protobuf:"fixed64,1,opt,name=arg1,proto3" json:"arg1,omitempty"`
}

func (m *IncRequest) Reset()                    { *m = IncRequest{} }
func (m *IncRequest) String() string            { return proto.CompactTextString(m) }
func (*IncRequest) ProtoMessage()               {}
func (*IncRequest) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{0} }

func (m *IncRequest) GetArg1() float64 {
	if m != nil {
		return m.Arg1
	}
	return 0
}

type IncResponse struct {
	Result1 float64 `protobuf:"fixed64,1,opt,name=result1,proto3" json:"result1,omitempty"`
}

func (m *IncResponse) Reset()                    { *m = IncResponse{} }
func (m *IncResponse) String() string            { return proto.CompactTextString(m) }
func (*IncResponse) ProtoMessage()               {}
func (*IncResponse) Descriptor() ([]byte, []int) { return fileDescriptorGenerated, []int{1} }

func (m *IncResponse) GetResult1() float64 {
	if m != nil {
		return m.Result1
	}
	return 0
}

func init() {
	proto.RegisterType((*IncRequest)(nil), "github.com.Serabe.iaas.iaas.IncRequest")
	proto.RegisterType((*IncResponse)(nil), "github.com.Serabe.iaas.iaas.IncResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for IaasService service

type IaasServiceClient interface {
	Inc(ctx context.Context, in *IncRequest, opts ...grpc.CallOption) (*IncResponse, error)
}

type iaasServiceClient struct {
	cc *grpc.ClientConn
}

func NewIaasServiceClient(cc *grpc.ClientConn) IaasServiceClient {
	return &iaasServiceClient{cc}
}

func (c *iaasServiceClient) Inc(ctx context.Context, in *IncRequest, opts ...grpc.CallOption) (*IncResponse, error) {
	out := new(IncResponse)
	err := grpc.Invoke(ctx, "/github.com.Serabe.iaas.iaas.IaasService/Inc", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for IaasService service

type IaasServiceServer interface {
	Inc(context.Context, *IncRequest) (*IncResponse, error)
}

func RegisterIaasServiceServer(s *grpc.Server, srv IaasServiceServer) {
	s.RegisterService(&_IaasService_serviceDesc, srv)
}

func _IaasService_Inc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IaasServiceServer).Inc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/github.com.Serabe.iaas.iaas.IaasService/Inc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IaasServiceServer).Inc(ctx, req.(*IncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IaasService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "github.com.Serabe.iaas.iaas.IaasService",
	HandlerType: (*IaasServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inc",
			Handler:    _IaasService_Inc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/Serabe/iaas/iaas/protos/github.com/Serabe/iaas/iaas/generated.proto",
}

func (m *IncRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Arg1 != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Generated(dAtA, i, uint64(math.Float64bits(float64(m.Arg1))))
	}
	return i, nil
}

func (m *IncResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Result1 != 0 {
		dAtA[i] = 0x9
		i++
		i = encodeFixed64Generated(dAtA, i, uint64(math.Float64bits(float64(m.Result1))))
	}
	return i, nil
}

func encodeFixed64Generated(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Generated(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintGenerated(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *IncRequest) Size() (n int) {
	var l int
	_ = l
	if m.Arg1 != 0 {
		n += 9
	}
	return n
}

func (m *IncResponse) Size() (n int) {
	var l int
	_ = l
	if m.Result1 != 0 {
		n += 9
	}
	return n
}

func sovGenerated(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGenerated(x uint64) (n int) {
	return sovGenerated(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *IncRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arg1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Arg1 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: IncResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: IncResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result1", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += 8
			v = uint64(dAtA[iNdEx-8])
			v |= uint64(dAtA[iNdEx-7]) << 8
			v |= uint64(dAtA[iNdEx-6]) << 16
			v |= uint64(dAtA[iNdEx-5]) << 24
			v |= uint64(dAtA[iNdEx-4]) << 32
			v |= uint64(dAtA[iNdEx-3]) << 40
			v |= uint64(dAtA[iNdEx-2]) << 48
			v |= uint64(dAtA[iNdEx-1]) << 56
			m.Result1 = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipGenerated(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGenerated
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenerated(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenerated
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenerated
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGenerated
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGenerated
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGenerated(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGenerated = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenerated   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("github.com/Serabe/iaas/iaas/protos/github.com/Serabe/iaas/iaas/generated.proto", fileDescriptorGenerated)
}

var fileDescriptorGenerated = []byte{
	// 225 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xf2, 0x4b, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x0f, 0x4e, 0x2d, 0x4a, 0x4c, 0x4a, 0xd5, 0xcf, 0x4c,
	0x4c, 0x2c, 0x86, 0x10, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0xc5, 0xfa, 0xf8, 0x94, 0xa4, 0xa7, 0xe6,
	0xa5, 0x16, 0x25, 0x96, 0xa4, 0xa6, 0xe8, 0x81, 0x15, 0x0b, 0x49, 0x23, 0x14, 0xeb, 0x41, 0x14,
	0xeb, 0x81, 0xd4, 0x81, 0x09, 0x29, 0x5d, 0x24, 0x93, 0xd2, 0xf3, 0xd3, 0xf3, 0x21, 0x16, 0x24,
	0x95, 0xa6, 0x81, 0x79, 0x60, 0x0e, 0x98, 0x05, 0x31, 0x4b, 0x49, 0x81, 0x8b, 0xcb, 0x33, 0x2f,
	0x39, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x88, 0x8b, 0x25, 0xb1, 0x28, 0xdd, 0x50,
	0x82, 0x51, 0x81, 0x51, 0x83, 0x31, 0x08, 0xcc, 0x56, 0x52, 0xe7, 0xe2, 0x06, 0xab, 0x28, 0x2e,
	0xc8, 0xcf, 0x2b, 0x4e, 0x15, 0x92, 0xe0, 0x62, 0x2f, 0x4a, 0x2d, 0x2e, 0xcd, 0x29, 0x81, 0xa9,
	0x82, 0x71, 0x8d, 0xd2, 0xb9, 0xb8, 0x3d, 0x13, 0x13, 0x8b, 0x83, 0x53, 0x8b, 0xca, 0x32, 0x93,
	0x53, 0x85, 0x22, 0xb8, 0x98, 0x3d, 0xf3, 0x92, 0x85, 0xd4, 0xf5, 0xf0, 0xb8, 0x56, 0x0f, 0x61,
	0xb7, 0x94, 0x06, 0x61, 0x85, 0x10, 0x27, 0x38, 0x89, 0x9d, 0x78, 0x24, 0xc7, 0x78, 0xe1, 0x91,
	0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x33, 0x1e, 0xcb, 0x31, 0x44, 0xb1, 0x80, 0xd4, 0x24, 0xb1,
	0x81, 0xbd, 0x64, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x91, 0x9e, 0xc7, 0x4f, 0x70, 0x01, 0x00,
	0x00,
}
